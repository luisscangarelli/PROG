// EXERCÍCIO 1: Herança em Funcionários

// Classe base Funcionario
class Funcionario {
    protected String nome;
    protected double salarioBase;
    
    public Funcionario(String nome, double salarioBase) {
        this.nome = nome;
        this.salarioBase = salarioBase;
    }
    
    public double calcularSalario() {
        return salarioBase;
    }
    
    public String getNome() {
        return nome;
    }
}

// Classe Gerente que herda de Funcionario
class Gerente extends Funcionario {
    public Gerente(String nome, double salarioBase) {
        super(nome, salarioBase);
    }
    
    @Override
    public double calcularSalario() {
        return salarioBase + (salarioBase * 0.20); // Bônus de 20%
    }
}

// Classe Estagiario que herda de Funcionario
class Estagiario extends Funcionario {
    public Estagiario(String nome, double salarioBase) {
        super(nome, salarioBase);
    }
    
    @Override
    public double calcularSalario() {
        return salarioBase + (salarioBase * 0.05); // Bônus de 5%
    }
}

public class Exercicio1 {
    public static void main(String[] args) {
        // Instanciar objetos das três classes
        Funcionario funcionario = new Funcionario("João Silva", 3000.0);
        Gerente gerente = new Gerente("Maria Santos", 5000.0);
        Estagiario estagiario = new Estagiario("Pedro Oliveira", 1500.0);
        
        // Exibir salário final de cada funcionário
        System.out.println("=== SALÁRIOS DOS FUNCIONÁRIOS ===");
        System.out.println("Funcionário: " + funcionario.getNome() + 
                          " - Salário: R$ " + funcionario.calcularSalario());
        System.out.println("Gerente: " + gerente.getNome() + 
                          " - Salário: R$ " + gerente.calcularSalario());
        System.out.println("Estagiário: " + estagiario.getNome() + 
                          " - Salário: R$ " + estagiario.calcularSalario());
    }
}

// EXERCÍCIO 2: Herança em Veículos

// Classe base Veiculo
class Veiculo {
    protected String marca;
    protected String modelo;
    protected int ano;
    
    public Veiculo(String marca, String modelo, int ano) {
        this.marca = marca;
        this.modelo = modelo;
        this.ano = ano;
    }
    
    public void exibirDados() {
        System.out.println("Marca: " + marca);
        System.out.println("Modelo: " + modelo);
        System.out.println("Ano: " + ano);
    }
}

// Classe Carro que herda de Veiculo
class Carro extends Veiculo {
    private int quantidadePortas;
    
    public Carro(String marca, String modelo, int ano, int quantidadePortas) {
        super(marca, modelo, ano);
        this.quantidadePortas = quantidadePortas;
    }
    
    @Override
    public void exibirDados() {
        System.out.println("=== INFORMAÇÕES DO CARRO ===");
        super.exibirDados();
        System.out.println("Quantidade de Portas: " + quantidadePortas);
    }
}

// Classe Moto que herda de Veiculo
class Moto extends Veiculo {
    private int cilindradas;
    
    public Moto(String marca, String modelo, int ano, int cilindradas) {
        super(marca, modelo, ano);
        this.cilindradas = cilindradas;
    }
    
    @Override
    public void exibirDados() {
        System.out.println("=== INFORMAÇÕES DA MOTO ===");
        super.exibirDados();
        System.out.println("Cilindradas: " + cilindradas + "cc");
    }
}

public class Exercicio2 {
    public static void main(String[] args) {
        // Instanciar um Carro e uma Moto
        Carro carro = new Carro("Toyota", "Corolla", 2023, 4);
        Moto moto = new Moto("Honda", "CB 600F", 2022, 600);
        
        // Exibir informações dos veículos
        carro.exibirDados();
        System.out.println();
        moto.exibirDados();
    }
}

// EXERCÍCIO 3: Herança em Animais

// Classe base Animal
class Animal {
    protected String nome;
    protected int idade;
    
    public Animal(String nome, int idade) {
        this.nome = nome;
        this.idade = idade;
    }
    
    public void emitirSom() {
        System.out.println("Som genérico de animal");
    }
    
    public String getNome() {
        return nome;
    }
    
    public int getIdade() {
        return idade;
    }
}

// Classe Cachorro que herda de Animal
class Cachorro extends Animal {
    public Cachorro(String nome, int idade) {
        super(nome, idade);
    }
    
    @Override
    public void emitirSom() {
        System.out.println("Latindo...");
    }
}

// Classe Gato que herda de Animal
class Gato extends Animal {
    public Gato(String nome, int idade) {
        super(nome, idade);
    }
    
    @Override
    public void emitirSom() {
        System.out.println("Miando...");
    }
}

public class Exercicio3 {
    public static void main(String[] args) {
        // Instanciar um Cachorro e um Gato
        Cachorro cachorro = new Cachorro("Rex", 5);
        Gato gato = new Gato("Mimi", 3);
        
        // Chamar método emitirSom() e exibir informações
        System.out.println("=== INFORMAÇÕES DOS ANIMAIS ===");
        
        System.out.println("Cachorro: " + cachorro.getNome() + 
                          " (Idade: " + cachorro.getIdade() + " anos)");
        cachorro.emitirSom();
        
        System.out.println();
        
        System.out.println("Gato: " + gato.getNome() + 
                          " (Idade: " + gato.getIdade() + " anos)");
        gato.emitirSom();
    }
}
